{"version":3,"sources":["components/astronomy-service-context/astronomy-service-context.js","components/hoc/with-astronomy-service.js","components/header/header.js","components/spinner/spinner.js","components/error-boundry/error-boundry.js","actions/index.js","utils/date-converter.js","components/astronomy-details/astronomy-details.js","components/error-indicator/error-indicator.js","components/astronomy-list/astronomy-list.js","components/app/app.js","reducers/index.js","store.js","index.js","services/astronomy-service.js"],"names":["React","createContext","AstronomyProvider","Provider","AstronomyConsumer","Consumer","withAstronomyService","Wrapped","props","astronomyService","Header","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Spinner","ErrorBoundry","data-dismiss","astronomyError","error","payload","DateConverter","date","moment","format","this","_defaultFormat","currentDate","convertDateToDefaultFormat","Date","AstronomyDetails","handleChangeDate","event","target","value","localStorage","setItem","fetchAstronomy","selectedDate","astronomy","loading","max","length","onChange","map","idx","media_type","title","url","explanation","key","src","alt","frameBorder","width","height","allowFullScreen","Component","connect","dispatch","ownProps","getAstronomy","then","data","dataPicture","push","catch","err","ErrorIndicator","AstronomyList","handleStartDateChanged","startDateChanged","fetchAstronomyList","endDate","handleEndDateChanged","endDateChanged","startDate","min","getAstronomyList","reverse","Fragment","path","exact","component","localStorageDate","getItem","initialState","reducer","state","action","store","createStore","_apiBase","_apiKey","day","axios","get","Promise","resolve","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd81216e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst {\n    Provider: AstronomyProvider,\n    Consumer: AstronomyConsumer\n} = React.createContext();\n\nexport {\n    AstronomyProvider,\n    AstronomyConsumer\n};","import React from \"react\";\nimport {AstronomyConsumer} from \"../astronomy-service-context/astronomy-service-context\";\n\nconst withAstronomyService = () => (Wrapped) => {\n    return (props) => {\n        return (\n            <AstronomyConsumer>\n                {\n                    (astronomyService) => {\n                        return (\n                            <Wrapped {...props} astronomyService={astronomyService}/>\n                        );\n                    }\n                }\n            </AstronomyConsumer>\n        );\n    };\n};\n\nexport {withAstronomyService};","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nimport \"./header.css\";\n\nconst Header = () => {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n            <Link className=\"navbar-brand\" to=\"/nasa-api\">Astronomy Picture of the Day</Link>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarColor02\"\n                    aria-controls=\"navbarColor02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarColor02\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item \">\n                        <Link className=\"nav-link\" to=\"/nasa-api\">Home <span className=\"sr-only\">(current)</span></Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/nasa-api/catalog\">Catalog</Link>\n                    </li>\n                </ul>\n\n            </div>\n        </nav>\n    );\n};\n\nexport default Header;","import React from \"react\";\n\nimport \"./spinner.css\";\n\nconst Spinner = () => {\n    return (\n        <div className=\"loadingio-spinner-eclipse-vsejm86ysv9\">\n            <div className=\"ldio-nhgy21l9o6i\">\n                <div></div>\n            </div>\n        </div>\n    )\n};\n\nexport default Spinner;","import React from \"react\";\n\nimport \"./error-boundry.css\";\n\nconst ErrorBoundry = () => {\n    return (\n        <div className=\"alert alert-dismissible alert-secondary\">\n            <button type=\"button\" className=\"close\" data-dismiss=\"alert\">&times;</button>\n            <h2>Ooops! Something gone wrong with API.</h2>\n            <h3>NASA has already sent astronauts to fix the problem.</h3>\n            <h5>(Try choose this date later!)</h5>\n        </div>\n    );\n};\n\nexport default ErrorBoundry;","const astronomyRequested = () => {\n    return {\n        type: 'ASTRONOMY_REQUESTED'\n    };\n};\n\nconst astronomyLoaded = (newAstronomy) => {\n    return {\n        type: 'ASTRONOMY_LOADED',\n        payload: newAstronomy\n    };\n};\n\nconst astronomyError = (error) => {\n    return {\n        type: 'ASTRONOMY_ERROR',\n        payload: error\n    };\n};\n\nconst astronomyListLoaded = (newAstronomyList) => {\n    return {\n        type: 'ASTRONOMY_LIST_LOADED',\n        payload: newAstronomyList\n    };\n};\n\nconst startDateChanged = (newStartDate) => {\n    return {\n        type: 'START_DATE_CHANGED',\n        payload: newStartDate\n    };\n};\n\nconst endDateChanged = (newEndDate) => {\n    return {\n        type: 'END_DATE_CHANGED',\n        payload: newEndDate\n    };\n};\n\n\nexport {\n    astronomyLoaded,\n    astronomyRequested,\n    astronomyError,\n    astronomyListLoaded,\n    startDateChanged,\n    endDateChanged\n};","import moment from \"moment\";\n\nexport default class DateConverter {\n    static _defaultFormat = 'YYYY-MM-DD';\n\n    static convertDateToDefaultFormat(date) {\n        return moment(date).format(this._defaultFormat);\n    };\n};","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\n\nimport Spinner from \"../spinner/spinner\";\nimport ErrorBoundry from \"../error-boundry/error-boundry\";\nimport {withAstronomyService} from \"../hoc/with-astronomy-service\";\nimport {astronomyLoaded, astronomyRequested, astronomyError} from \"../../actions/index\";\nimport DateConverter from \"../../utils/date-converter\";\n\nimport \"./astronomy-details.css\";\n\nconst currentDate = DateConverter.convertDateToDefaultFormat(new Date());\n\nclass AstronomyDetails extends Component {\n\n    componentDidMount() {\n        this.props.fetchAstronomy(this.props.selectedDate);\n    };\n\n    handleChangeDate = event => {\n        const date = event.target.value;\n\n        if (date !== currentDate) {\n            localStorage.setItem('date', date);\n        }\n\n        this.props.fetchAstronomy(date);\n    };\n\n    render() {\n        const {astronomy, loading, error} = this.props;\n\n        return (\n            <div className=\"picture-details\">\n                <div className=\"picture-date\">\n                    <h3>Choose another date</h3>\n                    <input type=\"date\"\n                           max={currentDate}\n                           value={astronomy.length > 0 ? astronomy[0].date : currentDate}\n                           onChange={this.handleChangeDate}/>\n                </div>\n                {error ? <ErrorBoundry/> : null}\n                {loading ? <Spinner/> : null}\n                {\n                    astronomy.map(({media_type, title, date, url, explanation}, idx) => {\n                        return (\n                            <div className=\"picture-details\" key={idx}>\n\n                                <h4>{date}</h4>\n                                <h1>{title}</h1>\n                                {\n                                    media_type === 'image'\n                                        ? <img src={url}\n                                               alt=\"astronomy\"/>\n                                        :\n                                        <iframe src={url} frameBorder=\"0\" width=\"70%\" height=\"700px\"\n                                                title=\"video\"\n                                                allowFullScreen/>\n                                }\n                                <p>{explanation}</p>\n                            </div>\n                        );\n                    })\n                }\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = ({astronomy, loading, error, selectedDate}) => {\n    return {\n        astronomy,\n        loading,\n        error,\n        selectedDate\n    };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    const {astronomyService} = ownProps;\n    return {\n        fetchAstronomy: (selectedDate) => {\n            dispatch(astronomyRequested());\n            astronomyService.getAstronomy(selectedDate)\n                .then(({data}) => {\n                    let dataPicture = [];\n                    dataPicture.push(data);\n                    dispatch(astronomyLoaded(dataPicture));\n                })\n                .catch(err => {\n                    dispatch(astronomyError(err));\n                });\n        }\n    };\n\n};\n\nexport default withAstronomyService()(connect(mapStateToProps, mapDispatchToProps)(AstronomyDetails));","import React from \"react\";\n\nimport \"./error-indicator.css\";\n\nconst ErrorIndicator = () => {\n    return (\n        <div className=\"alert alert-dismissible alert-secondary\">\n            <button type=\"button\" className=\"close\" data-dismiss=\"alert\">&times;</button>\n            <span>Choose another date</span>\n        </div>\n    );\n};\n\nexport default ErrorIndicator;","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\n\nimport Spinner from \"../spinner/spinner\";\nimport ErrorIndicator from \"../error-indicator/error-indicator\";\nimport {withAstronomyService} from \"../hoc/with-astronomy-service\";\nimport {\n    astronomyError,\n    astronomyListLoaded,\n    astronomyRequested,\n    startDateChanged,\n    endDateChanged\n} from \"../../actions/index\";\nimport DateConverter from \"../../utils/date-converter\";\n\nimport \"./astronomy-list.css\";\n\nclass AstronomyList extends Component {\n\n    componentDidMount() {\n        this.props.fetchAstronomyList(this.props.startDate, this.props.endDate);\n    };\n\n    handleStartDateChanged = (event) => {\n        this.props.startDateChanged(event.target.value);\n        this.props.fetchAstronomyList(event.target.value, this.props.endDate);\n    }\n\n    handleEndDateChanged = (event) => {\n        this.props.endDateChanged(event.target.value);\n        this.props.fetchAstronomyList(this.props.startDate, event.target.value);\n    }\n\n    render() {\n        const {astronomy, loading, error, startDate, endDate} = this.props;\n\n        return (\n            <div className=\"picture-list\">\n                <div className=\"list-range\">\n                    <span>From:</span>\n                    <input type=\"date\"\n                           value={startDate}\n                           max={endDate}\n                           onChange={this.handleStartDateChanged}\n                    />\n                    <span>To:</span>\n                    <input type=\"date\"\n                           value={endDate}\n                           min={startDate}\n                           max={DateConverter.convertDateToDefaultFormat(new Date())}\n                           onChange={this.handleEndDateChanged}/>\n                </div>\n\n                {error ? <ErrorIndicator/> : null}\n                {loading ? <Spinner/> : null}\n\n                <div className=\"card-list\">\n                    {\n                        astronomy.map(({media_type, title, date, url}, idx) => {\n                            return (\n                                <div key={idx} className=\"card text-white bg-primary mb-3\">\n                                    <div className=\"card-header\">{title}</div>\n                                    <div className=\"card-body\">\n                                        {\n                                            media_type === 'image'\n                                                ? <img src={url}\n                                                       alt=\"astronomy\"/>\n                                                :\n                                                <iframe src={url} frameBorder=\"0\" width=\"100%\" height=\"100%\"\n                                                        title=\"video\"\n                                                        allowFullScreen/>\n                                        }\n                                        <span>{date}</span>\n                                    </div>\n                                </div>\n                            );\n                        })\n                    }\n                </div>\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = ({astronomy, loading, error, startDate, endDate}) => {\n    return {\n        astronomy,\n        loading,\n        error,\n        startDate,\n        endDate\n    };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    const {astronomyService} = ownProps;\n\n    return {\n        fetchAstronomyList: (startDate, endDate) => {\n            dispatch(astronomyRequested());\n            astronomyService.getAstronomyList(startDate, endDate)\n                .then(({data}) => {\n                    dispatch(astronomyListLoaded(data.reverse()));\n                })\n                .catch(err => {\n                    dispatch(astronomyError(err));\n                });\n        },\n        startDateChanged: (startDate) => {\n            dispatch(startDateChanged(startDate))\n        },\n        endDateChanged: (endDate) => {\n            dispatch(endDateChanged(endDate))\n        }\n    };\n};\n\nexport default withAstronomyService()(connect(mapStateToProps, mapDispatchToProps)(AstronomyList));","import React from \"react\";\nimport {Switch, Route} from \"react-router-dom\";\nimport {withAstronomyService} from \"../hoc/with-astronomy-service\";\n\nimport Header from \"../header/header\";\nimport AstronomyDetails from \"../astronomy-details/astronomy-details\";\nimport AstronomyList from \"../astronomy-list/astronomy-list\";\n\nimport \"./app.css\";\n\nconst App = () => {\n    return (\n        <React.Fragment>\n            <Header/>\n            <Switch>\n                <Route path=\"/nasa-api\" exact component={AstronomyDetails}/>\n                <Route path=\"/nasa-api/catalog\" component={AstronomyList}/>\n            </Switch>\n        </React.Fragment>\n    )\n}\n\nexport default withAstronomyService()(App);","import DateConverter from \"../utils/date-converter\";\n\nconst localStorageDate = localStorage.getItem('date');\nconst currentDate = DateConverter.convertDateToDefaultFormat(new Date());\n\nconst initialState = {\n    astronomy: [],\n    selectedDate: localStorageDate === null ? currentDate : localStorageDate,\n    startDate: '2020-06-12',\n    endDate: currentDate,\n    loading: true,\n    error: null\n};\n\nconst reducer = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case 'ASTRONOMY_REQUESTED':\n            return {\n                ...state,\n                astronomy: [],\n                loading: true,\n                error: null\n            };\n\n        case 'ASTRONOMY_LOADED':\n            return {\n                ...state,\n                astronomy: action.payload,\n                loading: false,\n                error: null\n            };\n\n        case 'ASTRONOMY_ERROR':\n            return {\n                ...state,\n                astronomy: [],\n                loading: false,\n                error: action.payload\n            }\n\n        case 'ASTRONOMY_LIST_LOADED':\n            return {\n                ...state,\n                astronomy: action.payload,\n                loading: false,\n                error: null\n            };\n\n        case 'START_DATE_CHANGED':\n            return {\n                ...state,\n                startDate: action.payload\n            };\n\n        case 'END_DATE_CHANGED':\n            return {\n                ...state,\n                endDate: action.payload\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import {createStore} from \"redux\";\nimport reducer from \"./reducers\";\n\nconst store = createStore(reducer);\n\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nimport App from \"./components/app/app\";\nimport AstronomyService from \"./services/astronomy-service\";\nimport {AstronomyProvider} from \"./components/astronomy-service-context/astronomy-service-context\";\n\nimport \"./index.css\";\n\nimport store from \"./store\";\n\nconst astronomyService = new AstronomyService();\n\nReactDOM.render(\n    <Provider store={store}>\n        <AstronomyProvider value={astronomyService}>\n            <BrowserRouter>\n                <App/>\n            </BrowserRouter>\n        </AstronomyProvider>\n    </Provider>\n    ,\n    document.getElementById('root')\n);","import axios from \"axios\";\n\nexport default class AstronomyService {\n    _apiBase = 'https://api.nasa.gov/planetary/apod?';\n    _apiKey = '&api_key=1Y7KbQaKepAKKDALm5fRa1FX69qfZJ50ddAXqtv3';\n\n    getAstronomy = (day) => {\n        const data = axios.get(`${this._apiBase}date=${day}${this._apiKey}`);\n        return new Promise(resolve => {\n            resolve(data);\n        });\n    };\n\n    getAstronomyList = (startDate, endDate) => {\n        const data = axios.get(`${this._apiBase}start_date=${startDate}&end_date=${endDate}${this._apiKey}`);\n        return new Promise(resolve => resolve(data));\n    };\n};"],"sourceRoot":""}